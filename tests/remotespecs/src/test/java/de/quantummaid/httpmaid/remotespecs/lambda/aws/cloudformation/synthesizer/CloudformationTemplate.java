/*
 * Copyright (c) 2020 Richard Hauswald - https://quantummaid.de/.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package de.quantummaid.httpmaid.remotespecs.lambda.aws.cloudformation.synthesizer;

import lombok.AccessLevel;
import lombok.RequiredArgsConstructor;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import static de.quantummaid.httpmaid.remotespecs.lambda.aws.cloudformation.synthesizer.Marshaller.marshal;
import static java.util.stream.Collectors.toMap;

@RequiredArgsConstructor(access = AccessLevel.PRIVATE)
public final class CloudformationTemplate {
    private static final String AWS_TEMPLATE_FORMAT_VERSION = "2010-09-09";

    private final List<CloudformationResource> resources;
    private final List<CloudformationOutput> outputs;

    public static CloudformationTemplate cloudformationTemplate(final List<CloudformationResource> resources) {
        return cloudformationTemplate(resources, List.of());
    }

    public static CloudformationTemplate cloudformationTemplate(final List<CloudformationResource> resources,
                                                                final List<CloudformationOutput> outputs) {
        return new CloudformationTemplate(resources, outputs);
    }

    public String render() {
        final Map<String, Object> resourcesMap = resources.stream()
                .collect(toMap(CloudformationResource::name, CloudformationResource::render));
        final Map<String, Object> map = new LinkedHashMap<>();
        map.put("AWSTemplateFormatVersion", AWS_TEMPLATE_FORMAT_VERSION);
        map.put("Description", "Generated by HttpMaid test suite");
        map.put("Resources", resourcesMap);
        if (!outputs.isEmpty()) {
            final Map<String, Object> outputsMap = new LinkedHashMap<>();
            outputs.forEach(output -> {
                final String name = output.name();
                final Object value = output.value();
                outputsMap.put(name, Map.of("Value", value));
            });
            map.put("Outputs", outputsMap);
        }
        return marshal(map);
    }
}
