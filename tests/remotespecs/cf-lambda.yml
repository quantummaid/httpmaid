---
AWSTemplateFormatVersion: '2010-09-09'
Description: "HttpMaid AWS Lambda integration."

Parameters:
  StackIdentifier:
    Type: String
    Description: "Unique string to identify the stack"

  ArtifactBucketName:
    Type: String
    Description: "S3 Bucket were remotespecs jars are located"

  ArtifactKey:
    Type: String
    Description: "S3 Key of the remotespecs lamba jar to deploy"

Resources:

  ##############
  ## DynamoDB ##
  ##############

  WebsocketRegistryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref StackIdentifier
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"

  ############
  ## Lambda ##
  ############

  FunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${StackIdentifier}-FunctionRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub "${StackIdentifier}-FunctionRolePolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - sts:AssumeRole
                Resource: '*'
                Effect: Allow
        - PolicyName: !Sub "${StackIdentifier}-UseDBPolicy"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:UpdateItem'
                Resource: !Join ['', ["arn:aws:dynamodb:", !Sub "${AWS::Region}", ":", !Sub "${AWS::AccountId}", ":table/", !Ref WebsocketRegistryTable]]
                Effect: Allow
        - PolicyName: !Sub "${StackIdentifier}-ExecuteApi"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'execute-api:ManageConnections'
                Resource: "*"
                Effect: Allow
        - PolicyName: !Sub ${AWS::StackName}-getuser
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - "cognito-idp:GetUser"
        - PolicyName: !Sub ${AWS::StackName}-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
                - "apigateway.amazonaws.com" #
            Action:
              - "sts:AssumeRole"

  FunctionResourcePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Function

  WsAuthFnPerm:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:invokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref Function
      SourceArn: !Sub "arn:aws:apigateway:${AWS::Region}::/restapis/${HttpMaidWebsocketsApi}/stages/${HttpMaidWebsocketsApiStage}"

  Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${StackIdentifier}-Deployment"
      Code:
        S3Bucket: !Ref ArtifactBucketName
        S3Key: !Ref ArtifactKey
      Tags:
        - Key: StackIdentifier
          Value: !Ref StackIdentifier
      MemorySize: 512
      Handler: de.quantummaid.httpmaid.testlambda.TestLambda::handleRequest
      Role: !GetAtt FunctionRole.Arn
      Timeout: 20
      Runtime: java11
      Environment:
        Variables:
          WEBSOCKET_REGISTRY_TABLE: !Ref WebsocketRegistryTable
          POOL_ID: !Ref Pool
          POOL_CLIENT_ID: !Ref PoolClient
          REGION: !Sub "${AWS::Region}"

  ###########
  # Cognito #
  ###########

  Pool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-userpool"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: False
          RequireNumbers: False
          RequireSymbols: False
          RequireUppercase: False

  PoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref Pool
      ClientName: !Sub "${AWS::StackName}-poolclient"
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      ReadAttributes:
        - email
      CallbackURLs:
        - "https://example.org/"
      LogoutURLs:
        - "https://example.org/"
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthFlows:
        - "code"
      AllowedOAuthScopes:
        - "email"
        - "openid"
        - "aws.cognito.signin.user.admin"
      SupportedIdentityProviders:
        - COGNITO

  #####################
  ## HTTP ApiGateway ##
  #####################

  HttpMaidHttpApiWithV2Payloads:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${StackIdentifier} RemoteSpecs HTTP Api (Payload Version 2.0) Lambda Proxy"
      ProtocolType: HTTP
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  HttpMaidHttpApiWithV1Payloads:
    Type: "AWS::ApiGatewayV2::Api"
    Properties:
      Name: !Sub "${StackIdentifier} RemoteSpecs HTTP Api (Payload Version 1.0) Lambda Proxy"
      ProtocolType: HTTP

  HttpMaidHttpApiWithV1PayloadsDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    DependsOn:
      - HttpMaidHttpApiWithV1Payloads
    Properties:
      ApiId: !Ref HttpMaidHttpApiWithV1Payloads
      IntegrationType: AWS_PROXY
      PayloadFormatVersion: "1.0"
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  HttpMaidHttpApiWithV1PayloadsDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - HttpMaidHttpApiWithV1Payloads
      - HttpMaidHttpApiWithV1PayloadsDefaultIntegration
    Properties:
      ApiId: !Ref HttpMaidHttpApiWithV1Payloads
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join ['/', [integrations, !Ref HttpMaidHttpApiWithV1PayloadsDefaultIntegration]]

  HttpMaidHttpApiWithV1PayloadsDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - HttpMaidHttpApiWithV1Payloads
      - HttpMaidHttpApiWithV1PayloadsDefaultIntegration
      - HttpMaidHttpApiWithV1PayloadsDefaultRoute
    Properties:
      ApiId: !Ref HttpMaidHttpApiWithV1Payloads

  HttpMaidHttpApiWithV1PayloadsApiStage:
    Type: AWS::ApiGatewayV2::Stage
    DependsOn:
      - HttpMaidHttpApiWithV1Payloads
      - HttpMaidHttpApiWithV1PayloadsDeployment
    Properties:
      StageName: $default
      ApiId: !Ref HttpMaidHttpApiWithV1Payloads
      DeploymentId: !Ref HttpMaidHttpApiWithV1PayloadsDeployment

  #####################
  ## REST ApiGateway ##
  #####################

  HttpMaidApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${StackIdentifier} RemoteSpecs Rest Api Lambda Proxy"
      FailOnWarnings: true

  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref HttpMaidApi
      ParentId: !GetAtt HttpMaidApi.RootResourceId
      PathPart: "{path+}"

  AnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RestApiId: !Ref HttpMaidApi
      ResourceId: !Ref ApiResource
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  SecondAnyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      RestApiId: !Ref HttpMaidApi
      ResourceId: !GetAtt
        - HttpMaidApi
        - RootResourceId
      ApiKeyRequired: false
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref HttpMaidApi
      StageName: !Ref StackIdentifier

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: AnyMethod
    Properties:
      RestApiId: !Ref HttpMaidApi

  ################
  ## Authorizer ##
  ################

  # https://github.com/cazzer/breakdown/blob/c0d2c47d088ffccfaeb1cc26060471b24e9ad611/services/websocket-gateway/template.yaml
  WsAuth:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: !Sub ${AWS::StackName}-wsauth
      ApiId: !Ref HttpMaidWebsocketsApi
      AuthorizerCredentialsArn: !GetAtt FunctionRole.Arn
      AuthorizerType: REQUEST
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Function.Arn}/invocations
      IdentitySource:
        - route.request.querystring.access_token

  ###########################
  ## WebSockets ApiGateway ##
  ###########################

  HttpMaidWebsocketsApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "${StackIdentifier} RemoteSpecs WebSockets Lambda Proxy"
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  HttpMaidWebsocketsApiConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpMaidWebsocketsApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WsAuth
      #AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref HttpMaidWebsocketsApiConnectIntegration]] # See below

  HttpMaidWebsocketsApiConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpMaidWebsocketsApi
      Description: Integration for builtin $connect route
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  HttpMaidWebsocketsApiDefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpMaidWebsocketsApi
      RouteKey: $default
      AuthorizationType: NONE
      RouteResponseSelectionExpression: $default
      Target: !Join ['/', [integrations, !Ref HttpMaidWebsocketsApiDefaultIntegration]]

  HttpMaidWebsocketsApiDefaultIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpMaidWebsocketsApi
      IntegrationType: AWS_PROXY
      IntegrationUri:
        !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${StackIdentifier}-Deployment/invocations

  HttpMaidWebsocketsApiDefaultResponse:
    Type: AWS::ApiGatewayV2::RouteResponse
    Properties:
      RouteId: !Ref HttpMaidWebsocketsApiDefaultRoute
      ApiId: !Ref HttpMaidWebsocketsApi
      RouteResponseKey: $default

  HttpMaidWebsocketsApiDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - HttpMaidWebsocketsApiDefaultRoute
      - HttpMaidWebsocketsApiConnectRoute
      - HttpMaidWebsocketsApiDefaultResponse
    Properties:
      ApiId: !Ref HttpMaidWebsocketsApi

  HttpMaidWebsocketsApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref StackIdentifier
      DeploymentId: !Ref HttpMaidWebsocketsApiDeployment
      ApiId: !Ref HttpMaidWebsocketsApi

Outputs:
  PoolClientId:
    Value: !Ref PoolClient

  PoolId:
    Value: !Ref Pool
